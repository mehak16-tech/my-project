PROJECT: Person Class Hierarchy with Student and Teacher Subclasses
1) Technologies Used:
    a) React: For building the user interface with a component-based architecture.
    b) JavaScript (ES6+): For the core logic, specifically using ES6 Classes for Object-Oriented Programming.
    c) CSS3: For styling the components to present the information clearly.
    d) Vite: As the build tool for a fast development environment.


2) Project Overview:
    a) In this project, I explored the core Object-Oriented Programming (OOP) concept of inheritance in JavaScript.
    b) The goal was to create a base Person class and extend it into more specialized subclasses, Student and Teacher, to understand how properties and methods are inherited and overridden.
    c) The final output is displayed in a clean, card-based UI built with React, which makes the results of the class logic easy to visualize.
    d) This is a foundational concept crucial for building scalable and organized applications, where you can create reusable and extensible code structures.


3) Project File Structure:
    The project is organized with a standard Vite + React structure, keeping components separate for better maintainability.

    src/
    ├── App.css                      # Styling for all components
    ├── App.jsx                      # Main application entry point
    ├── main.jsx                     # Renders the React app to the DOM
    └── components/
        ├── ClassHierarchyDemo.jsx   # Contains class logic and main view
        └── PersonCard.jsx           # Reusable component to display person data


3) Structure:
    a) JavaScript Class Hierarchy:
    The foundation of the project is the class structure. I started with a generic base class and then created specialized versions.
    
    Snippets:
    i) Base Person Class: This class acts as the blueprint, containing common properties (name, age) and a method (getInfo) shared by all subclasses. SNIPPET (ClassHierarchyDemo.jsx):
    class Person {
        constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    getInfo() {
        return `Name: ${this.name}, Age: ${this.age}`;
        }
    }


    ii) Student and Teacher Subclasses: These classes inherit from Person using the extends keyword. They add their own unique properties (grade for Student, subject for Teacher) and provide their own, more specific version of the getInfo method. The super() function is used to call the constructor of the parent class. SNIPPET (ClassHierarchyDemo.jsx):
    class Student extends Person {
    constructor(name, age, grade) {
        super(name, age); // Calls the Person constructor
        this.grade = grade;
    }
    getInfo() {
        return `${super.getInfo()}, Grade: ${this.grade}`;
        }
    }


b) React Components:
To display the results, I structured the UI into simple, reusable components.

Snippets:
    i) ClassHierarchyDemo.jsx: This is the main component for the experiment. It contains the class definitions and is responsible for creating instances (objects) of the Student and Teacher classes. SNIPPET (ClassHierarchyDemo.jsx):
        function ClassHierarchyDemo() {
        const student = new Student('Alice', 15, '10th');
        const teacher = new Teacher('Mr. Smith', 45, 'Mathematics');

        return (
        );
        }

    ii) PersonCard.jsx: A reusable UI component that takes a title and details as props and displays them in a styled card. This keeps the display logic separate and clean. SNIPPET (Usage in ClassHierarchyDemo.jsx):
        <PersonCard 
        title="Student Instance Details" 
        details={student.getInfo()} 
        />

    iii) App.jsx and App.css: The main App.jsx serves as the entry point that renders the ClassHierarchyDemo component, while App.css contains all the styling for the cards and layout to make the output look professional.
        import ClassHierarchyDemo from './components/ClassHierarchyDemo';
        import './App.css';

        function App() {
         return (
         <div className="container">
          <ClassHierarchyDemo />
        </div>
        );
       }


4) Learning Outcomes:
    a) Gained a practical understanding of how to implement Inheritance in modern JavaScript using ES6 classes.
    b) Learned to use the extends and super keywords to create subclasses and properly initialize them.
    c) Understood the concept of Method Overriding, where a subclass provides a specific implementation of a method that is already defined in its parent class.
    d) Practiced structuring a React application by breaking down the UI into smaller, manageable components (ClassHierarchyDemo, PersonCard).
    e) Reinforced my knowledge of passing data from a parent component to a child using props.


5) Key Concepts:
    a) Object-Oriented Programming (OOP) in JavaScript
    b) ES6 Classes (class, constructor)
    c) Inheritance (extends, super)
    d) Method Overriding
    e) React Component Architecture
    f) Props for Data Flow