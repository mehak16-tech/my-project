PROJECT: ProductCard Component Using Props

1) Technologies Used:
    a) React: For creating a component-based user interface to display product information.
    b) JavaScript (ES6+): For defining data structures (product objects) and passing them through the application.
    c) CSS3: For professional styling of the product cards, layout, and overall presentation.
    d) Vite: As the modern build tool for a fast development environment.


2) Project Overview:
    a) This project focuses on the fundamental React concept of creating reusable components to display a list of product data.
    b) I built an application that renders multiple product cards on a page, with each card showing details like the product's name, price, and stock availability.
    c) The primary objective was to practice defining data in a parent component and passing it down to child components via props, a core pattern in React development.
    d) The UI is styled to be clean and modern, with hover effects on the cards to provide a better user experience.


3) Project File Structure:
    The project is organized with a clear and scalable structure, separating the main application logic from the reusable UI components.

        src/
        ├── App.css               # Contains all styling for the application
        ├── App.jsx               # Main application component, holds product data
        └── Components/
            └── product_card.jsx  # Reusable component for displaying one product


4) Structure:
    React Components and Data Flow:
        The application's architecture is centered on a parent component (App.jsx) that defines the data and a child component (ProductCard.jsx) that is responsible for displaying that data.

        Snippets:

            i) App.jsx (Data Source & Container): This component acts as the main container for the application. Inside App.jsx, I defined the product data as a series of JavaScript objects. It then renders the ProductCard component for each product, passing the corresponding object down as a prop. SNIPPET (App.jsx):
                    import './App.css';
                    import ProductCard from './Components/product_card';
                    function App() {
                      const product1 = {
                        name: "Wireless Mouse",
                        price: 25.99,
                        instock: true
                    };
                      // ... more product objects
                      return (
                        <div className="app-wrapper">
                          <h1 className="main-title">Products List</h1>
                          <div className="products-container">
                            <ProductCard product={product1} />
                            {/* ... more product cards */}
                          </div>
                        </div>
                      );
                    }


            ii) product_card.jsx (Reusable Presentational Component): This component is designed to be reusable. Its only job is to receive a product object via its props and display the information in a styled card. It uses a ternary operator within JSX to conditionally display "In Stock" or "Out of Stock" based on the boolean value of product.instock. SNIPPET (product_card.jsx):
                    import React from 'react';
                    function ProductCard({ product }) {
                      return (
                        <div className="product-card">
                          <h3 className="product-name">{product.name}</h3>
                          <p className="product-price">Price: ${product.price}</p>
                          <p className="product-status">
                            Status: {product.instock ? 'In Stock' : 'Out of Stock'}
                          </p>
                        </div>
                      );
                    }


5) Learning Outcomes:
    a) Solidified my understanding of creating and structuring functional components in React.
    b) Mastered the concept of passing data from a parent to a child component using props.
    c) Learned how to make components reusable by designing them to accept and display data dynamically.
    d) Practiced using JavaScript expressions and conditional rendering (specifically with a ternary operator) directly within JSX.
    e) Gained experience in styling components with CSS, including layout with Flexbox and adding interactive hover effects.

6) Key Concepts:
    a) React Functional Components
    b) JSX for UI Rendering
    c) Props for Parent-to-Child Data Communication
    d) Component Reusability
    e) Conditional Rendering
    f) CSS Styling in a React Application