Description of a React Application with Class Hierarchy and CSS Styling

This project is a small React application that demonstrates fundamental concepts in object-oriented programming (OOP) and modern CSS styling. Instead of a registration form, I used React to build a simple system that displays information for different types of people: students and teachers. I then styled the layout using CSS to make it look clean and professional.

---->Class Hierarchy Breakdown
I used JavaScript classes to create a structured way to handle data. This is a great example of inheritance, which is a core OOP principle.

1 Person (Base Class): This is the main class that all other classes inherit from. It's like a blueprint for any person. It has a constructor to set a name and age and a getInfo() method to display this basic information.

2 Student (Subclass): This class extends Person, which means it automatically gets all the properties and methods from the Person class. On top of that, it has its own unique property, course. I also overrode the getInfo() method to include the course information, so it provides a more detailed description for a student.

3 Teacher (Subclass): Similar to the Student class, Teacher also extends Person. It adds a subject property and overrides the getInfo() method to include the subject they teach.

---->CSS Styling Overview
I created a separate CSS file to style the components. My goal was to build a clean, modern interface, similar to a library or data management application, as suggested by the class names like .library-container and .book-item.

1 body (Page Layout): I used a light gray background color (#e0e0e0) and Flexbox (display: flex) to perfectly center the entire content block both horizontally and vertically. This ensures the design looks good on any screen size.

2.library-container (Main Wrapper): This is the main card that holds all the content. It has a white background, soft rounded corners (border-radius: 12px), and a subtle shadow (box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1)) to make it pop out from the background.

3 h2 (Headers): I styled the main headings with a slightly darker, muted gray color (#a19f9f) to distinguish them from the main text and give the layout a softer feel.

4 .dark-input (Input Fields): I chose a unique style for the input fields with a dark gray background (#777373), which makes them stand out and matches the dark buttons. I also made sure to remove the default browser border.

5 button (General Buttons): I gave all buttons a uniform style: a clean border, rounded corners, bold text, and a smooth transition effect when hovered over.

6 .add-button & .remove-button (Specific Button Colors): I used separate classes to apply different background colors to the buttons. The .add-button is a light gray, and the .remove-button is a slightly pinkish-gray. Hover effects give them a subtle color change to provide visual feedback.

7 .book-item (List Items): This class is used to style the display of individual data entries, like a book in a library list. It uses a light gray background (#f8f8f8) and Flexbox to neatly align the item's text with its corresponding remove button.

--->Learnings outcome 
1 How to use class-based components and inheritance in JavaScript to structure data.
2 How to override methods in a subclass to customize their functionality.
3 How to use modern CSS, including Flexbox and box-shadow, to create a visually appealing and centered layout.